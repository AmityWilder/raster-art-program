use std::collections::{HashMap, VecDeque};
use raylib::prelude::*;

#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum MouseInput {
    Left,
    Right,
    Middle,
    Side,
    Extra,
    Forward,
    Back,
}

impl From<MouseButton> for MouseInput {
    fn from(value: MouseButton) -> Self {
        match value {
            MouseButton::MOUSE_BUTTON_LEFT => MouseInput::Left,
            MouseButton::MOUSE_BUTTON_RIGHT => MouseInput::Right,
            MouseButton::MOUSE_BUTTON_MIDDLE => MouseInput::Middle,
            MouseButton::MOUSE_BUTTON_SIDE => MouseInput::Side,
            MouseButton::MOUSE_BUTTON_EXTRA => MouseInput::Extra,
            MouseButton::MOUSE_BUTTON_FORWARD => MouseInput::Forward,
            MouseButton::MOUSE_BUTTON_BACK => MouseInput::Back,
        }
    }
}

impl From<MouseInput> for MouseButton {
    fn from(value: MouseInput) -> Self {
        match value {
            MouseInput::Left => MouseButton::MOUSE_BUTTON_LEFT,
            MouseInput::Right => MouseButton::MOUSE_BUTTON_RIGHT,
            MouseInput::Middle => MouseButton::MOUSE_BUTTON_MIDDLE,
            MouseInput::Side => MouseButton::MOUSE_BUTTON_SIDE,
            MouseInput::Extra => MouseButton::MOUSE_BUTTON_EXTRA,
            MouseInput::Forward => MouseButton::MOUSE_BUTTON_FORWARD,
            MouseInput::Back => MouseButton::MOUSE_BUTTON_BACK,
        }
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum KeyInput {
    Apostrophe,
    Comma,
    Minus,
    Period,
    Slash,
    Zero,
    One,
    Two,
    Three,
    Four,
    Five,
    Six,
    Seven,
    Eight,
    Nine,
    Semicolon,
    Equal,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    LeftBracket,
    Backslash,
    RightBracket,
    Grave,
    Space,
    Escape,
    Enter,
    Tab,
    Backspace,
    Insert,
    Delete,
    Right,
    Left,
    Down,
    Up,
    PageUp,
    PageDown,
    Home,
    End,
    CapsLock,
    ScrollLock,
    NumLock,
    PrintScreen,
    Pause,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    LeftShift,
    LeftControl,
    LeftAlt,
    LeftSuper,
    RightShift,
    RightControl,
    RightAlt,
    RightSuper,
    KbMenu,
    Kp0,
    Kp1,
    Kp2,
    Kp3,
    Kp4,
    Kp5,
    Kp6,
    Kp7,
    Kp8,
    Kp9,
    KpDecimal,
    KpDivide,
    KpMultiply,
    KpSubtract,
    KpAdd,
    KpEnter,
    KpEqual,
    Back,
    VolumeUp,
    VolumeDown,
}

impl From<KeyboardKey> for KeyInput {
    fn from(value: KeyboardKey) -> Self {
        match value {
            KeyboardKey::KEY_NULL => panic!("NULL is not a valid key"),
            KeyboardKey::KEY_APOSTROPHE => KeyInput::Apostrophe,
            KeyboardKey::KEY_COMMA => KeyInput::Comma,
            KeyboardKey::KEY_MINUS => KeyInput::Minus,
            KeyboardKey::KEY_PERIOD => KeyInput::Period,
            KeyboardKey::KEY_SLASH => KeyInput::Slash,
            KeyboardKey::KEY_ZERO => KeyInput::Zero,
            KeyboardKey::KEY_ONE => KeyInput::One,
            KeyboardKey::KEY_TWO => KeyInput::Two,
            KeyboardKey::KEY_THREE => KeyInput::Three,
            KeyboardKey::KEY_FOUR => KeyInput::Four,
            KeyboardKey::KEY_FIVE => KeyInput::Five,
            KeyboardKey::KEY_SIX => KeyInput::Six,
            KeyboardKey::KEY_SEVEN => KeyInput::Seven,
            KeyboardKey::KEY_EIGHT => KeyInput::Eight,
            KeyboardKey::KEY_NINE => KeyInput::Nine,
            KeyboardKey::KEY_SEMICOLON => KeyInput::Semicolon,
            KeyboardKey::KEY_EQUAL => KeyInput::Equal,
            KeyboardKey::KEY_A => KeyInput::A,
            KeyboardKey::KEY_B => KeyInput::B,
            KeyboardKey::KEY_C => KeyInput::C,
            KeyboardKey::KEY_D => KeyInput::D,
            KeyboardKey::KEY_E => KeyInput::E,
            KeyboardKey::KEY_F => KeyInput::F,
            KeyboardKey::KEY_G => KeyInput::G,
            KeyboardKey::KEY_H => KeyInput::H,
            KeyboardKey::KEY_I => KeyInput::I,
            KeyboardKey::KEY_J => KeyInput::J,
            KeyboardKey::KEY_K => KeyInput::K,
            KeyboardKey::KEY_L => KeyInput::L,
            KeyboardKey::KEY_M => KeyInput::M,
            KeyboardKey::KEY_N => KeyInput::N,
            KeyboardKey::KEY_O => KeyInput::O,
            KeyboardKey::KEY_P => KeyInput::P,
            KeyboardKey::KEY_Q => KeyInput::Q,
            KeyboardKey::KEY_R => KeyInput::R,
            KeyboardKey::KEY_S => KeyInput::S,
            KeyboardKey::KEY_T => KeyInput::T,
            KeyboardKey::KEY_U => KeyInput::U,
            KeyboardKey::KEY_V => KeyInput::V,
            KeyboardKey::KEY_W => KeyInput::W,
            KeyboardKey::KEY_X => KeyInput::X,
            KeyboardKey::KEY_Y => KeyInput::Y,
            KeyboardKey::KEY_Z => KeyInput::Z,
            KeyboardKey::KEY_LEFT_BRACKET => KeyInput::LeftBracket,
            KeyboardKey::KEY_BACKSLASH => KeyInput::Backslash,
            KeyboardKey::KEY_RIGHT_BRACKET => KeyInput::RightBracket,
            KeyboardKey::KEY_GRAVE => KeyInput::Grave,
            KeyboardKey::KEY_SPACE => KeyInput::Space,
            KeyboardKey::KEY_ESCAPE => KeyInput::Escape,
            KeyboardKey::KEY_ENTER => KeyInput::Enter,
            KeyboardKey::KEY_TAB => KeyInput::Tab,
            KeyboardKey::KEY_BACKSPACE => KeyInput::Backspace,
            KeyboardKey::KEY_INSERT => KeyInput::Insert,
            KeyboardKey::KEY_DELETE => KeyInput::Delete,
            KeyboardKey::KEY_RIGHT => KeyInput::Right,
            KeyboardKey::KEY_LEFT => KeyInput::Left,
            KeyboardKey::KEY_DOWN => KeyInput::Down,
            KeyboardKey::KEY_UP => KeyInput::Up,
            KeyboardKey::KEY_PAGE_UP => KeyInput::PageUp,
            KeyboardKey::KEY_PAGE_DOWN => KeyInput::PageDown,
            KeyboardKey::KEY_HOME => KeyInput::Home,
            KeyboardKey::KEY_END => KeyInput::End,
            KeyboardKey::KEY_CAPS_LOCK => KeyInput::CapsLock,
            KeyboardKey::KEY_SCROLL_LOCK => KeyInput::ScrollLock,
            KeyboardKey::KEY_NUM_LOCK => KeyInput::NumLock,
            KeyboardKey::KEY_PRINT_SCREEN => KeyInput::PrintScreen,
            KeyboardKey::KEY_PAUSE => KeyInput::Pause,
            KeyboardKey::KEY_F1 => KeyInput::F1,
            KeyboardKey::KEY_F2 => KeyInput::F2,
            KeyboardKey::KEY_F3 => KeyInput::F3,
            KeyboardKey::KEY_F4 => KeyInput::F4,
            KeyboardKey::KEY_F5 => KeyInput::F5,
            KeyboardKey::KEY_F6 => KeyInput::F6,
            KeyboardKey::KEY_F7 => KeyInput::F7,
            KeyboardKey::KEY_F8 => KeyInput::F8,
            KeyboardKey::KEY_F9 => KeyInput::F9,
            KeyboardKey::KEY_F10 => KeyInput::F10,
            KeyboardKey::KEY_F11 => KeyInput::F11,
            KeyboardKey::KEY_F12 => KeyInput::F12,
            KeyboardKey::KEY_LEFT_SHIFT => KeyInput::LeftShift,
            KeyboardKey::KEY_LEFT_CONTROL => KeyInput::LeftControl,
            KeyboardKey::KEY_LEFT_ALT => KeyInput::LeftAlt,
            KeyboardKey::KEY_LEFT_SUPER => KeyInput::LeftSuper,
            KeyboardKey::KEY_RIGHT_SHIFT => KeyInput::RightShift,
            KeyboardKey::KEY_RIGHT_CONTROL => KeyInput::RightControl,
            KeyboardKey::KEY_RIGHT_ALT => KeyInput::RightAlt,
            KeyboardKey::KEY_RIGHT_SUPER => KeyInput::RightSuper,
            KeyboardKey::KEY_KB_MENU => KeyInput::KbMenu,
            KeyboardKey::KEY_KP_0 => KeyInput::Kp0,
            KeyboardKey::KEY_KP_1 => KeyInput::Kp1,
            KeyboardKey::KEY_KP_2 => KeyInput::Kp2,
            KeyboardKey::KEY_KP_3 => KeyInput::Kp3,
            KeyboardKey::KEY_KP_4 => KeyInput::Kp4,
            KeyboardKey::KEY_KP_5 => KeyInput::Kp5,
            KeyboardKey::KEY_KP_6 => KeyInput::Kp6,
            KeyboardKey::KEY_KP_7 => KeyInput::Kp7,
            KeyboardKey::KEY_KP_8 => KeyInput::Kp8,
            KeyboardKey::KEY_KP_9 => KeyInput::Kp9,
            KeyboardKey::KEY_KP_DECIMAL => KeyInput::KpDecimal,
            KeyboardKey::KEY_KP_DIVIDE => KeyInput::KpDivide,
            KeyboardKey::KEY_KP_MULTIPLY => KeyInput::KpMultiply,
            KeyboardKey::KEY_KP_SUBTRACT => KeyInput::KpSubtract,
            KeyboardKey::KEY_KP_ADD => KeyInput::KpAdd,
            KeyboardKey::KEY_KP_ENTER => KeyInput::KpEnter,
            KeyboardKey::KEY_KP_EQUAL => KeyInput::KpEqual,
            KeyboardKey::KEY_BACK => KeyInput::Back,
            KeyboardKey::KEY_VOLUME_UP => KeyInput::VolumeUp,
            KeyboardKey::KEY_VOLUME_DOWN => KeyInput::VolumeDown,
        }
    }
}

impl From<KeyInput> for KeyboardKey {
    fn from(value: KeyInput) -> Self {
        match value {
            KeyInput::Apostrophe => KeyboardKey::KEY_APOSTROPHE,
            KeyInput::Comma => KeyboardKey::KEY_COMMA,
            KeyInput::Minus => KeyboardKey::KEY_MINUS,
            KeyInput::Period => KeyboardKey::KEY_PERIOD,
            KeyInput::Slash => KeyboardKey::KEY_SLASH,
            KeyInput::Zero => KeyboardKey::KEY_ZERO,
            KeyInput::One => KeyboardKey::KEY_ONE,
            KeyInput::Two => KeyboardKey::KEY_TWO,
            KeyInput::Three => KeyboardKey::KEY_THREE,
            KeyInput::Four => KeyboardKey::KEY_FOUR,
            KeyInput::Five => KeyboardKey::KEY_FIVE,
            KeyInput::Six => KeyboardKey::KEY_SIX,
            KeyInput::Seven => KeyboardKey::KEY_SEVEN,
            KeyInput::Eight => KeyboardKey::KEY_EIGHT,
            KeyInput::Nine => KeyboardKey::KEY_NINE,
            KeyInput::Semicolon => KeyboardKey::KEY_SEMICOLON,
            KeyInput::Equal => KeyboardKey::KEY_EQUAL,
            KeyInput::A => KeyboardKey::KEY_A,
            KeyInput::B => KeyboardKey::KEY_B,
            KeyInput::C => KeyboardKey::KEY_C,
            KeyInput::D => KeyboardKey::KEY_D,
            KeyInput::E => KeyboardKey::KEY_E,
            KeyInput::F => KeyboardKey::KEY_F,
            KeyInput::G => KeyboardKey::KEY_G,
            KeyInput::H => KeyboardKey::KEY_H,
            KeyInput::I => KeyboardKey::KEY_I,
            KeyInput::J => KeyboardKey::KEY_J,
            KeyInput::K => KeyboardKey::KEY_K,
            KeyInput::L => KeyboardKey::KEY_L,
            KeyInput::M => KeyboardKey::KEY_M,
            KeyInput::N => KeyboardKey::KEY_N,
            KeyInput::O => KeyboardKey::KEY_O,
            KeyInput::P => KeyboardKey::KEY_P,
            KeyInput::Q => KeyboardKey::KEY_Q,
            KeyInput::R => KeyboardKey::KEY_R,
            KeyInput::S => KeyboardKey::KEY_S,
            KeyInput::T => KeyboardKey::KEY_T,
            KeyInput::U => KeyboardKey::KEY_U,
            KeyInput::V => KeyboardKey::KEY_V,
            KeyInput::W => KeyboardKey::KEY_W,
            KeyInput::X => KeyboardKey::KEY_X,
            KeyInput::Y => KeyboardKey::KEY_Y,
            KeyInput::Z => KeyboardKey::KEY_Z,
            KeyInput::LeftBracket => KeyboardKey::KEY_LEFT_BRACKET,
            KeyInput::Backslash => KeyboardKey::KEY_BACKSLASH,
            KeyInput::RightBracket => KeyboardKey::KEY_RIGHT_BRACKET,
            KeyInput::Grave => KeyboardKey::KEY_GRAVE,
            KeyInput::Space => KeyboardKey::KEY_SPACE,
            KeyInput::Escape => KeyboardKey::KEY_ESCAPE,
            KeyInput::Enter => KeyboardKey::KEY_ENTER,
            KeyInput::Tab => KeyboardKey::KEY_TAB,
            KeyInput::Backspace => KeyboardKey::KEY_BACKSPACE,
            KeyInput::Insert => KeyboardKey::KEY_INSERT,
            KeyInput::Delete => KeyboardKey::KEY_DELETE,
            KeyInput::Right => KeyboardKey::KEY_RIGHT,
            KeyInput::Left => KeyboardKey::KEY_LEFT,
            KeyInput::Down => KeyboardKey::KEY_DOWN,
            KeyInput::Up => KeyboardKey::KEY_UP,
            KeyInput::PageUp => KeyboardKey::KEY_PAGE_UP,
            KeyInput::PageDown => KeyboardKey::KEY_PAGE_DOWN,
            KeyInput::Home => KeyboardKey::KEY_HOME,
            KeyInput::End => KeyboardKey::KEY_END,
            KeyInput::CapsLock => KeyboardKey::KEY_CAPS_LOCK,
            KeyInput::ScrollLock => KeyboardKey::KEY_SCROLL_LOCK,
            KeyInput::NumLock => KeyboardKey::KEY_NUM_LOCK,
            KeyInput::PrintScreen => KeyboardKey::KEY_PRINT_SCREEN,
            KeyInput::Pause => KeyboardKey::KEY_PAUSE,
            KeyInput::F1 => KeyboardKey::KEY_F1,
            KeyInput::F2 => KeyboardKey::KEY_F2,
            KeyInput::F3 => KeyboardKey::KEY_F3,
            KeyInput::F4 => KeyboardKey::KEY_F4,
            KeyInput::F5 => KeyboardKey::KEY_F5,
            KeyInput::F6 => KeyboardKey::KEY_F6,
            KeyInput::F7 => KeyboardKey::KEY_F7,
            KeyInput::F8 => KeyboardKey::KEY_F8,
            KeyInput::F9 => KeyboardKey::KEY_F9,
            KeyInput::F10 => KeyboardKey::KEY_F10,
            KeyInput::F11 => KeyboardKey::KEY_F11,
            KeyInput::F12 => KeyboardKey::KEY_F12,
            KeyInput::LeftShift => KeyboardKey::KEY_LEFT_SHIFT,
            KeyInput::LeftControl => KeyboardKey::KEY_LEFT_CONTROL,
            KeyInput::LeftAlt => KeyboardKey::KEY_LEFT_ALT,
            KeyInput::LeftSuper => KeyboardKey::KEY_LEFT_SUPER,
            KeyInput::RightShift => KeyboardKey::KEY_RIGHT_SHIFT,
            KeyInput::RightControl => KeyboardKey::KEY_RIGHT_CONTROL,
            KeyInput::RightAlt => KeyboardKey::KEY_RIGHT_ALT,
            KeyInput::RightSuper => KeyboardKey::KEY_RIGHT_SUPER,
            KeyInput::KbMenu => KeyboardKey::KEY_KB_MENU,
            KeyInput::Kp0 => KeyboardKey::KEY_KP_0,
            KeyInput::Kp1 => KeyboardKey::KEY_KP_1,
            KeyInput::Kp2 => KeyboardKey::KEY_KP_2,
            KeyInput::Kp3 => KeyboardKey::KEY_KP_3,
            KeyInput::Kp4 => KeyboardKey::KEY_KP_4,
            KeyInput::Kp5 => KeyboardKey::KEY_KP_5,
            KeyInput::Kp6 => KeyboardKey::KEY_KP_6,
            KeyInput::Kp7 => KeyboardKey::KEY_KP_7,
            KeyInput::Kp8 => KeyboardKey::KEY_KP_8,
            KeyInput::Kp9 => KeyboardKey::KEY_KP_9,
            KeyInput::KpDecimal => KeyboardKey::KEY_KP_DECIMAL,
            KeyInput::KpDivide => KeyboardKey::KEY_KP_DIVIDE,
            KeyInput::KpMultiply => KeyboardKey::KEY_KP_MULTIPLY,
            KeyInput::KpSubtract => KeyboardKey::KEY_KP_SUBTRACT,
            KeyInput::KpAdd => KeyboardKey::KEY_KP_ADD,
            KeyInput::KpEnter => KeyboardKey::KEY_KP_ENTER,
            KeyInput::KpEqual => KeyboardKey::KEY_KP_EQUAL,
            KeyInput::Back => KeyboardKey::KEY_BACK,
            KeyInput::VolumeUp => KeyboardKey::KEY_VOLUME_UP,
            KeyInput::VolumeDown => KeyboardKey::KEY_VOLUME_DOWN,
        }
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Hash)]
pub enum Input {
    Mouse(MouseInput),
    Key(KeyInput),
}

#[derive(Clone, Copy, PartialEq, Eq, Hash)]
pub enum InputChange {
    Released,
    Pressed,
}

pub struct InputEvents {
    events: Vec<(Input, VecDeque<InputChange>)>,
}

impl InputEvents {
    pub const fn new() -> Self {
        Self {
            events: Vec::new(),
        }
    }

    pub fn update(&mut self, rl: &RaylibHandle, inputs: impl IntoIterator<Item = Input>) {
        for input in inputs {
            let index;
            if let Some(pos) = self.events.iter().position(|(k, q)| *k == input) {
                index = pos;
            } else {
                index = self.events.len();
                self.events.push((input, VecDeque::new()));
            }
            self.events[index].1 = match input {
                Input::Mouse(btn) =>  rl.is_mouse_button_pressed(btn).then_some(InputChange::Pressed)
                    .or_else(|| rl.is_mouse_button_released(btn).then_some(InputChange::Released)),

                Input::Key(key) => rl.is_key_pressed(key).then_some(InputChange::Pressed)
                    .or_else(|| rl.is_key_released(key).then_some(InputChange::Released)),
            };
        }
    }

    #[must_use = "returns the element without any side effects"]
    pub fn peek(&self, input: Input) -> Option<&InputChange> {
        self.events.iter().find_map(|(k, q)| if *k == input { q.front() } else { None })
    }

    pub fn pop(&mut self, input: Input) -> Option<InputChange> {
        self.events.iter_mut().find_map(|(k, q)| if *k == input { q.pop_front() } else { None })
    }
}
